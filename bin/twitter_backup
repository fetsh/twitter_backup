#!/usr/bin/env ruby
# coding: utf-8

require File.expand_path(File.join(File.dirname(__FILE__), %w[.. lib twitter_backup]))

say ".... checking existance of credentials"
if TwitterBackup::Config.credentials_missing?
  TwitterBackup::UI.ask_credentials
end

say ".... configuring database"
TwitterBackup::Config.configure_database

say ".... configuring twitter gem"
TwitterBackup::Config.configure_twitter_gem

begin
  say ".... checking validity of credentials"
  user = TwitterBackup::Config.verify_credentials

  TwitterBackup::UI.greet_user user

  if TwitterBackup::Config.seeded?
    TwitterBackup::Tweet.update_tweets
  else
    TwitterBackup::Tweet.seed_tweets
    # TwitterBackup::Config.mark_as_seeded
  end

rescue Twitter::Error::TooManyRequests => error
  TwitterBackup::UI.too_many_requests_exit
end

# if false == @options[:initial_seeded]
#   my_tweats, raw_tweats, counter  = [], [], 0
#   last_tweat = TwitterBackup::Tweat.all.last
#   begin
#     while last_tweat != TwitterBackup::Tweat.new(raw_tweats.last)
#       counter += 1
#       raw_tweats.each do |tweat|
#         last_tweat = TwitterBackup::Tweat.new(tweat)
#         my_tweats << last_tweat unless my_tweats.last == last_tweat
#       end
#       if last_tweat.blank?
#         raw_tweats = Twitter.user_timeline(user, :count => 200)
#       else
#         raw_tweats = Twitter.user_timeline(user, :max_id => last_tweat.id, :count => 200)
#       end
#       say "Request ##{counter}"
#     end
#     @options[:initial_seeded] = true
#     TwitterBackup::Config.save(@options)
#     say "Seems like backuped"
#   rescue Twitter::Error::TooManyRequests => error
#     puts "AAAAAAAAAAAA"
#     raise
#   ensure
#     TwitterBackup::Tweat.save(my_tweats)
#     say "Saved tweats: <%= color(my_tweats.size.to_s, GREEN) %>"
#   end
# else
#   # latest_tweat = TwitterBackup::Tweat.latest
#   # unless latest_tweat.present?
#   #   say  "Woa! You've said that you have an initial seed, but we can't figure your latest tweat out."
#   #   raise "Something went wrong"
#   # end
#   # raw_tweats, new_tweats = []
#   # while latest_tweat != TwitterBackup::Tweat.new(raw_tweats.last)
#   #   raw_tweats.each do |tweat|
#   #     latest_tweat = TwitterBackup::Tweat.new(tweat)
#   #     my_tweats << latest_tweat unless my_tweats.last == latest_tweat
#   #   end
#   #   raw_tweats = Twitter.user_timeline(user, :since_id => latest_tweat.id, :count => 200)

#   # end
# end

# say "Tweats in your base: <%= color(TwitterBackup::Tweat.all.size.to_s, GREEN) %>"
# say "Your latest tweat: <%= color(TwitterBackup::Tweat.latest.text, MAGENTA) %>"
# say "Your first tweat: <%= color(TwitterBackup::Tweat.first.text, YELLOW) %>"